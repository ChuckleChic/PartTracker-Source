////package com.example.parttracker.model
////
////import androidx.room.Entity
////import androidx.room.PrimaryKey
////import androidx.room.Index
////
////@Entity(
////    tableName = "scanned_part_table",
////    primaryKeys = [
////        "partName", "productId", "trolleyName", "trolleyNumber",
////        "sequenceNumber", "location", "model", "color", "date", "shift"
////    ]
////)
////data class ScannedPart(
////    val partName: String = "",
////    val productId: String = "",
////    val trolleyName: String = "",
////    val trolleyNumber: String = "",
////    val quantity: Int = 0,
////    val sequenceNumber: Int = 0,
////    val timestamp: String = "",  // Can be Long if needed
////    val location: String = "",
////    val color: String = "",
////    val model: String = "",
////    val date: String = "",
////    val shift: String = ""
////)
//// {
////    // Helper to convert to Firestore map
////    fun toFirestoreMap(): Map<String, Any?> {
////        return mapOf(
////            "partName" to partName,
////            "productId" to productId,
////            "trolleyName" to trolleyName,
////            "trolleyNumber" to trolleyNumber,
////            "quantity" to quantity,
////            "sequenceNumber" to sequenceNumber,
////            "timestamp" to timestamp,
////            "location" to location,
////            "color" to color,
////            "model" to model,
////            "date" to date,
////            "shift" to shift
////        )
////    }
////
////
////    companion object {
////        fun fromFirestoreMap(data: Map<String, Any?>): ScannedPart {
////            return ScannedPart(
////                partName = data["partName"] as? String ?: "",
////                productId = data["productId"] as? String ?: "",
////                trolleyName = data["trolleyName"] as? String ?: "",
////                trolleyNumber = data["trolleyNumber"] as? String ?: "",
////                quantity = (data["quantity"] as? Long)?.toInt() ?: 0,
////                sequenceNumber = (data["sequenceNumber"] as? Long)?.toInt(),
////                timestamp = data["timestamp"] as? String ?: "",
////                location = data["location"] as? String ?: "",
////                color = data["color"] as? String ?: "",
////                model = data["model"] as? String ?: "",
////                date = data["date"] as? String ?: "",
////                shift = data["shift"] as? String ?: ""
////            )
////        }
////    }
////
////}
////
//
//
//package com.example.parttracker.model
//
//import androidx.room.Entity
//import androidx.room.PrimaryKey
//
//@Entity(tableName = "scanned_part_table")
//data class ScannedPart(
//    @PrimaryKey(autoGenerate = true)
//    val id: Int = 0,  // Unique autogenerated ID
//
//    val partName: String = "",
//    val productId: String = "",
//    val trolleyName: String = "",
//    val trolleyNumber: String = "",
//    val quantity: Int = 0,
//    val sequenceNumber: Int? = null,  // NOT part of PK
//    val timestamp: String = "",
//    val location: String = "",
//    val color: String = "",
//    val model: String = "",
//    val date: String = "",
//    val shift: String = ""
//) {
//    fun toFirestoreMap(): Map<String, Any?> {
//        return mapOf(
//            "id" to id,
//            "partName" to partName,
//            "productId" to productId,
//            "trolleyName" to trolleyName,
//            "trolleyNumber" to trolleyNumber,
//            "quantity" to quantity,
//            "sequenceNumber" to sequenceNumber,
//            "timestamp" to timestamp,
//            "location" to location,
//            "color" to color,
//            "model" to model,
//            "date" to date,
//            "shift" to shift
//        )
//    }
//
//    companion object {
//        fun fromFirestoreMap(data: Map<String, Any?>): ScannedPart {
//            return ScannedPart(
//                id = (data["id"] as? Long)?.toInt() ?: 0,
//                partName = data["partName"] as? String ?: "",
//                productId = data["productId"] as? String ?: "",
//                trolleyName = data["trolleyName"] as? String ?: "",
//                trolleyNumber = data["trolleyNumber"] as? String ?: "",
//                quantity = (data["quantity"] as? Long)?.toInt() ?: 0,
//                sequenceNumber = (data["sequenceNumber"] as? Long)?.toInt() ?: 0,
//                timestamp = data["timestamp"] as? String ?: "",
//                location = data["location"] as? String ?: "",
//                color = data["color"] as? String ?: "",
//                model = data["model"] as? String ?: "",
//                date = data["date"] as? String ?: "",
//                shift = data["shift"] as? String ?: ""
//            )
//        }
//    }
//}


package com.example.parttracker.model

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "scanned_part_table")
data class ScannedPart(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,  // Unique autogenerated ID

    val partName: String = "",
    val productId: String = "",
    val trolleyName: String = "",
    val trolleyNumber: String = "",
    val quantity: Int = 0,
    val sequenceNumber: Int? = null,  // Optional, not for uniqueness
    val timestamp: Long = System.currentTimeMillis(),       // Used for display/logging, not uniqueness
    val location: String = "",
    val color: String = "",
    val model: String = "",
    val date: String = "",
    val shift: String = ""
) {
    fun toFirestoreMap(): Map<String, Any?> {
        return mapOf(
            "id" to id,
            "partName" to partName,
            "productId" to productId,
            "trolleyName" to trolleyName,
            "trolleyNumber" to trolleyNumber,
            "quantity" to quantity,
            "sequenceNumber" to sequenceNumber,
            "timestamp" to timestamp,
            "location" to location,
            "color" to color,
            "model" to model,
            "date" to date,
            "shift" to shift
        )
    }

    companion object {
        fun fromFirestoreMap(data: Map<String, Any?>): ScannedPart {
            return ScannedPart(
                id = (data["id"] as? Long)?.toInt() ?: 0,
                partName = data["partName"] as? String ?: "",
                productId = data["productId"] as? String ?: "",
                trolleyName = data["trolleyName"] as? String ?: "",
                trolleyNumber = data["trolleyNumber"] as? String ?: "",
                quantity = (data["quantity"] as? Long)?.toInt() ?: 0,
                sequenceNumber = (data["sequenceNumber"] as? Long)?.toInt(),
                timestamp = (data["timestamp"] as? Long) ?: System.currentTimeMillis(),
                location = data["location"] as? String ?: "",
                color = data["color"] as? String ?: "",
                model = data["model"] as? String ?: "",
                date = data["date"] as? String ?: "",
                shift = data["shift"] as? String ?: ""
            )
        }
    }
}
