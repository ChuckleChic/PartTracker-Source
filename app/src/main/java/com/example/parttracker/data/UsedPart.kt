//////package com.example.parttracker.data
//////
//////import androidx.room.Entity
//////import androidx.room.PrimaryKey
//////
//////@Entity(tableName = "used_parts")
//////data class UsedPart(
//////    @PrimaryKey(autoGenerate = true) val id: String = 0.toString(),
//////    val partName: String,
//////    val quantity: Int,
//////    val timestamp: Long = System.currentTimeMillis()
//////)
////
////package com.example.parttracker.data
////
////import androidx.room.Entity
////import androidx.room.PrimaryKey
////
////@Entity(tableName = "used_parts")
////data class UsedPart(
////    @PrimaryKey(autoGenerate = true)
////    val id: Int = 0,  // âœ… Correct auto-generated primary key
////    val partName: String,
////    val quantity: Int,
////    val timestamp: Long = System.currentTimeMillis()
////)
//
//
//package com.example.parttracker.data
//
//import androidx.room.Entity
//import androidx.room.PrimaryKey
//import androidx.room.Ignore // Import for Room to ignore fields not in DB
//
//@Entity(tableName = "used_parts")
//data class UsedPart(
//    @PrimaryKey(autoGenerate = true)
//    val id: Int = 0,
//    val partName: String,
//    val quantity: Int,
//    val timestamp: Long = System.currentTimeMillis(),
//    @Ignore // <--- IMPORTANT: Room will ignore this field
//    var documentId: String = "" // <--- NEW: Stores the Firestore document ID
//) {
//    // Helper function to convert to Map for Firestore
//    fun toFirestoreMap(): Map<String, Any?> {
//        return mapOf(
//            "documentId" to documentId, // Include documentId when pushing to Firestore
//            "partName" to partName,
//            "quantity" to quantity,
//            "timestamp" to timestamp
//        )
//    }
//
//    companion object {
//        // Helper function to create UsedPart from Firestore Map
//        fun fromFirestoreMap(data: Map<String, Any?>): UsedPart? {
//            return try {
//                UsedPart(
//                    // id is auto-generated by Room, so we don't set it from Firestore
//                    // If you later need to pull UsedParts into Room and match by ID,
//                    // you'd need a strategy for how Room handles existing IDs vs. new ones.
//                    // For now, id=0 will let Room auto-generate a new one if inserted.
//                    id = 0, // Room will auto-generate this on insertion if it's 0
//                    partName = data["partName"] as? String ?: "",
//                    quantity = (data["quantity"] as? Number)?.toInt() ?: 0,
//                    timestamp = (data["timestamp"] as? Number)?.toLong() ?: System.currentTimeMillis(),
//                    documentId = data["documentId"] as? String ?: "" // Read documentId from Firestore
//                )
//            } catch (e: Exception) {
//                e.printStackTrace()
//                null
//            }
//        }
//    }
//}

package com.example.parttracker.data

import androidx.room.Entity
import androidx.room.PrimaryKey
// No @Ignore needed for documentId here as it's not in the primary constructor

@Entity(tableName = "used_parts")
data class UsedPart(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,
    val partName: String,
    val quantity: Int,
    val timestamp: Long = System.currentTimeMillis()
) {
    // Moved documentId outside the primary constructor
    var documentId: String = ""

    // Helper function to convert to Map for Firestore
    fun toFirestoreMap(): Map<String, Any?> {
        return mapOf(
            "documentId" to documentId,
            "partName" to partName,
            "quantity" to quantity,
            "timestamp" to timestamp
        )
    }

    companion object {
        // Helper function to create UsedPart from Firestore Map
        fun fromFirestoreMap(data: Map<String, Any?>): UsedPart? {
            return try {
                val usedPart = UsedPart(
                    id = 0, // Room will auto-generate this on insertion if it's 0
                    partName = data["partName"] as? String ?: "",
                    quantity = (data["quantity"] as? Number)?.toInt() ?: 0,
                    timestamp = (data["timestamp"] as? Number)?.toLong() ?: System.currentTimeMillis()
                )
                usedPart.documentId = data["documentId"] as? String ?: ""
                return usedPart
            } catch (e: Exception) {
                e.printStackTrace()
                null
            }
        }
    }
}